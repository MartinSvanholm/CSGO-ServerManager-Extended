@using System.Text.RegularExpressions
@using System.Net
@inject ISnackbar Snackbar
@inject ICsgoServerService _csgoServerService
@inject IServerSettingsService _serverSettingsService

<MudDialog @bind-IsVisible="isVisible" Options="dialogOptions" OnBackdropClick="(async () => await ChangeVisibility.InvokeAsync(false))">
    <TitleContent>
        <MudText>@(EditType == EditType.Edit ? "Edit server" : "Add a new server")</MudText>
    </TitleContent>

    <DialogContent>
        <MudForm @bind-IsValid="@isValid">
            <MudTextField Disabled=IsDathostServer @bind-Value="TempServer.Name" Label="Name" Required=true RequiredError="Server name is required" Immediate=true Clearable=true MaxLength="30"></MudTextField>
                <MudTextField T="string" Disabled=IsDathostServer @bind-Value="TempServer.Ip" Label="Ip" Required=true RequiredError="Server ip is required" DebounceInterval="1000" Validation="@(new Func<string, string>(IpValidation))" Clearable=true Placeholder="123.456.789.00" HelperText="123.456.789.00" HelperTextOnFocus="true"></MudTextField>
            <MudTextField Disabled=IsDathostServer T="int?" @bind-Value="TempServer.GamePort" Label="Port" Required=true RequiredError="Server port is required" Immediate=true MaxLength="5" Clearable=true Placeholder="12345" HelperText="12345" HelperTextOnFocus="true"></MudTextField>
            <MudTextField Disabled=IsDathostServer @bind-Value="TempServer.Password" Label="Password" Immediate=true Clearable=true></MudTextField>
            <MudTextField Disabled=IsDathostServer @bind-Value="TempServer.RconPassword" Label="Rcon password" Required=true Immediate=true Clearable=true></MudTextField>
            <MudCheckBox @bind-Checked="TempServer.ServerSettings.IsFavourite" Label="Favourite" CheckedIcon="@Icons.Material.Filled.Star" UncheckedIcon="@Icons.Material.Filled.StarBorder"/>
            <MudTextField @bind-Value="TempServer.ServerSettings.Description" Lines="3" Variant="Variant.Outlined" Label="Description" Immediate=true Clearable=true></MudTextField>
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="(async () => await ChangeVisibility.InvokeAsync(false))">Cancel</MudButton>
            <MudButton Disabled="!isValid" Variant="Variant.Filled" Color="Color.Primary" OnClick="(async () => await Submit())">@(EditType == EditType.Edit ? "Edit" : "Add")</MudButton>
    </DialogActions>
</MudDialog>

    @code {
    [Parameter, EditorRequired]
    public bool isVisible { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<bool> ChangeVisibility { get; set; }

    [Parameter, EditorRequired]
    public ICsgoServer TempServer { get; set; }

    [Parameter, EditorRequired]
    public EditType EditType { get; set; }

    private bool IsDathostServer { get => TempServer is DatHostCsgoServer ? true : false; }

    DialogOptions dialogOptions = new() { FullWidth = true, CloseButton = false };
    bool isValid;

    private async Task Submit()
    {
        if(EditType == EditType.Edit)
        {
            if(TempServer is DatHostCsgoServer) {
                try
                {
                    await _serverSettingsService.UpdateServerSettings(TempServer.ServerSettings);
                }
                catch (Exception e)
                {
                    Snackbar.Add(e.Message, Severity.Warning, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
                }
            } 
            else 
            {
                try
                {
                    await _csgoServerService.UpdateCsgoServer((CsgoServer)TempServer);
                }
                catch (Exception e)
                {
                    Snackbar.Add(e.Message, Severity.Warning, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
                }
            }

            Snackbar.Add($"Updated server \"{TempServer.Name}\"", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        } 
        else
        {
            try
            {
                await _csgoServerService.AddCsgoServer((CsgoServer)TempServer);
                Snackbar.Add($"Added server \"{TempServer.Name}\"", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
            }
            catch (Exception e)
            {
                Snackbar.Add(e.Message, Severity.Warning, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
            }
        }
        await ChangeVisibility.InvokeAsync(true);
    }

    private async Task UpdateDathostServerSettings() {
        try
        {
            await _serverSettingsService.UpdateServerSettings(TempServer.ServerSettings);
            Snackbar.Add($"Updated server \"{TempServer.Name}\"", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Warning, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
    }

    private string IpValidation(string ip) {
        if (!string.IsNullOrEmpty(ip) && !Regex.IsMatch(ip, @"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"))
        {
            return "Incorrect ip format";
        }

        return null;
    }
}
