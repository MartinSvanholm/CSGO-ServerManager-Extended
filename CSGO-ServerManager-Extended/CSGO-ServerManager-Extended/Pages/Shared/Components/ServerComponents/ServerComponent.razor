@using System.Timers
@using System.Diagnostics.CodeAnalysis
@using CsgoServerInterface.Exceptions
@inject ICsgoServerService CsgoServerService
@inject HttpClient _client
@inject ISnackbar _snackBar

<MudBreakpointProvider>
    <div class="content-container">
        <MudGrid Justify="Justify.SpaceBetween">
            
            @if(ServerHeader is not null) {
                <MudItem xs="12">
                    @ServerHeader
                </MudItem>
            }

            <MudItem xs="12">
                <MudStack>
                    <MudText Typo="Typo.subtitle1" Style="font-weight: bold">General Commands</MudText>
                    <MudDivider />
                </MudStack>
            </MudItem>

            <MudItem xs="12" sm="5" md="3">
                <MudCard>
                    <Tooltip Text="Click to choose a map">
                        <MudList Disabled="@disable" Clickable="true" @bind-SelectedItem="selectedItem">
                            <MudListItem @bind-Expanded="expandList" Text="Change map">
                                <NestedList>
                                    <MudListItem Text="Inferno" @onclick="@(async () => await ChangeMap("inferno"))" />
                                    <MudListItem Text="Overpass" @onclick="@(async () => await ChangeMap("overpass"))" />
                                    <MudListItem Text="Nuke" @onclick="@(async () => await ChangeMap("nuke"))" />
                                    <MudListItem Text="Ancient" @onclick="@(async () => await ChangeMap("ancient"))" />
                                    <MudListItem Text="Dust2" @onclick="@(async () => await ChangeMap("dust2"))" />
                                    <MudListItem Text="Vertigo" @onclick="@(async () => await ChangeMap("vertigo"))" />
                                    <MudListItem Text="Mirage" @onclick="@(async () => await ChangeMap("mirage"))" />
                                </NestedList>
                            </MudListItem>
                        </MudList>
                    </Tooltip>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="7" md="6">
                <MudStack Row="true" Spacing="10" AlignItems="AlignItems.Center">
                    <MudTextField Disabled="@disable" @bind-Value="@customCommand" Immediate="true" Label="Send custom command" />
                    <MudButton Disabled="@disable" Size="Size.Medium" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(async () => await SendCustomCommand())">Send command</MudButton>
                </MudStack>
            </MudItem>

            <MudItem xs="12">
                <MudStack>
                    <MudText Typo="Typo.subtitle1" Style="font-weight: bold">Match Commands</MudText>
                    <MudDivider />
                </MudStack>
            </MudItem>

            <MudItem xs="12" sm="4">
                <MudButtonGroup Class="btn-full-width" Color="Color.Primary" Variant="Variant.Outlined">
                    <MudButton Class="btn-full-width" Disabled="@disable" @onclick="@(async () => await StartMatch(false))">Start match</MudButton>
                    <MudButton Class="btn-full-width" Disabled="@disable" @onclick="@(async () => await StartMatch(true))">Start match with overtime</MudButton>
                </MudButtonGroup>
            </MudItem>

            <MudItem xs="12" sm="4" Class="d-flex justify-center">
                <MudButton Class="btn-full-width" Disabled="@disable" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(async () => await PauseUnpauseMatch())">@pausedBtnText</MudButton>
            </MudItem>

            <MudItem xs="12" sm="4" Class="d-flex justify-end">
                <MudButton Class="btn-full-width" Disabled="@disable" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(async () => await StartKnife())">Start knife</MudButton>
            </MudItem>

            <MudItem xs="12" Class="d-flex justify-end">
                <MudButton Class="btn-full-width" Disabled="@disable" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(async () => await SwitchSides())">Switch sides</MudButton>
            </MudItem>

            <MudItem xs="12">
                <MudStack>
                    <MudText Typo="Typo.subtitle1" Style="font-weight: bold">Other commands</MudText>
                    <MudDivider />
                </MudStack>
            </MudItem>

            <MudItem xs="12" Class="d-flex justify-start">
                <MudButton Class="btn-full-width" Disabled="@disable" Color="Color.Primary" Variant="Variant.Filled" @onclick="@(async () => await StartNadePractice())">Start nade practice</MudButton>
            </MudItem>

            <MudItem xs="12">
                <ServerSettings csgoServer="Server">

                </ServerSettings>
            </MudItem>

        </MudGrid>
    </div>
</MudBreakpointProvider>

@code {
    [Parameter, AllowNull]
    public RenderFragment ServerHeader { get; set; }

    [Parameter, EditorRequired]
    public ICsgoServer Server { get; set; }

    [Parameter]
    public EventCallback<ICsgoServer> OnServerChange { get; set; }

    private bool disable { get => Server.IsOn == false || Server.Booting == true; }

    Timer serverUpdateTimer = new(10000);
    MudListItem selectedItem;
    bool expandList = false;
    bool matchpaused = false;
    string pausedBtnText = "Pause match";
    string customCommand = "";

    protected override async Task OnInitializedAsync()
    {
        CsgoServerService.Server = Server;

        if (Server is DatHostCsgoServer)
        {
            serverUpdateTimer.Elapsed += async ( sender, e ) => await UpdateServer();
            serverUpdateTimer.AutoReset = true;
            serverUpdateTimer.Enabled = true;
        } 
        else 
        {
            try
            {
                await Server.GetConnection();
                Server.IsOn = true;
            }
            catch (Exception e)
            {
                _snackBar.Add($"Could not connect to server: {e.Message}", Severity.Warning, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
            }
        }
    }

    public void Dispose()
    {
        serverUpdateTimer.Stop();
        serverUpdateTimer.Close();
    }

    private async Task UpdateServer()
    {
        Server = await CsgoServerService.GetDatHostServer(Server.Id);
        await InvokeAsync(StateHasChanged);
        await InvokeAsync(OnServerChanged);
    }

    private async Task OnServerChanged()
    {
        await OnServerChange.InvokeAsync(Server);
    }

    private async Task ChangeMap(string map)
    {
        expandList = false;
        try
        {
            await CsgoServerService.ChangeMap(map);
            _snackBar.Add($"Switching to {map}", Severity.Normal, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
    }

    private async Task StartMatch(bool overtime)
    {
        try
        {
            if(overtime == false)
            {
                await CsgoServerService.StartMatch(overtime, Server.ServerSettings.MatchCommand);
            } else
            {
                await CsgoServerService.StartMatch(overtime, Server.ServerSettings.OvertimeCommand);
            }
            _snackBar.Add("Starting match", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
    }

    private async Task PauseUnpauseMatch()
    {
        try
        {
            await CsgoServerService.PauseUnpauseMatch(matchpaused);
            matchpaused = !matchpaused;

            if (matchpaused)
            {
                pausedBtnText = "Unpause match";
                _snackBar.Add("Match will be paused during next freezetime", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
            }
            else
            {
                pausedBtnText = "Pause match";
                _snackBar.Add("Match will be unpaused", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
            }
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
    }

    private async Task StartKnife()
    {
        try
        {
            await CsgoServerService.StartKnife(Server.ServerSettings.KnifeCommand);
            _snackBar.Add("Starting knife round", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
    }

    private async Task SwitchSides()
    {
        try
        {
            await CsgoServerService.RunCommand("mp_swapteams");
            _snackBar.Add("Switching sides", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
    }

    private async Task StartNadePractice()
    {
        try
        {
            await CsgoServerService.StartNadePractice(Server.ServerSettings.PracticeCommand);
            _snackBar.Add("Starting nade practice", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
    }

    private async Task SendCustomCommand()
    {
        try
        {
            await CsgoServerService.RunCommand(customCommand);
            _snackBar.Add("Running command", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
        }
    }
}