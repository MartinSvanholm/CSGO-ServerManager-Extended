@using CSGO_ServerManager_Extended.Pages.Shared.Components.Buttons
@inject ICsgoServerService CsgoServerService
@inject ISettingsService settingsService
@inject ISnackbar Snackbar
@inject NavigationManager navigation

<MudTable Items="@csgoServers" RowStyle="cursor: pointer;" Hover="true" Loading="@_loading" OnRowClick="RowClickEvent" T="ICsgoServer" LoadingProgressColor="Color.Info" Elevation="0">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Your servers</MudText>
        <MudSpacer />
        <MudStack Row="true">
            <Tooltip Text="Reload servers">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="(async () => await GetServersAsync())"></MudIconButton>
            </Tooltip>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => OpenEditDialog(EditType.Create, null))">Add server</MudButton>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="font-weight: bold;">Name</MudTh>
        <MudTh Style="font-weight: bold;">Connection Ip</MudTh>
        <MudTh Style="font-weight: bold; text-align: center;">Status</MudTh>
        <MudTh Style="font-weight: bold; text-align: center;">Players online</MudTh>
        <MudTh Style="font-weight: bold; text-align: center;">Edit</MudTh>
        <MudTh Style="font-weight: bold; text-align: center;">Delete</MudTh>
    </HeaderContent>
    <RowTemplate >
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Connection Ip" HideSmall="true">@context.ConnectionIp</MudTd>
        <MudTd Style="text-align: center" DataLabel="Status">@context.Status</MudTd>
        <MudTd Style="text-align: center" DataLabel="Players online">@context.PlayersOnline</MudTd>
        <MudTd Style="text-align: center" DataLabel="Edit">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="(() => OpenEditDialog(EditType.Edit, context))"></MudIconButton>
        </MudTd>
        <MudTd Style="text-align: center" id="td-column" DataLabel="Delete">
            <DeleteIconBtn Icon="@Icons.Material.Filled.Delete" Color="@Color.Default" Size="@Size.Medium" OnConfirm="(async () => await DeleteServerAsync(context))"/>
        </MudTd>
    </RowTemplate>
</MudTable>

<CsgoServerDialog isVisible="isVisible" ChangeVisibility="(async (bool isSucces) => await OnVisibilityChanged(isSucces))" TempServer="tempServer" EditType="_editType" />

<MudMessageBox @ref="confirmMessageBox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting cannot be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter]
    public bool isVisible { get; set; } = false;

    private List<ICsgoServer> csgoServers = new();
    private ICsgoServer tempServer;
    private EditType _editType;
    private bool _loading = true;
    private MudMessageBox confirmMessageBox { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetServersAsync();
        CsgoServerService.ServerChanged += OnServerChanged;
        if (isVisible)
            OpenEditDialog(EditType.Create, null);
    }

    private void RowClickEvent(TableRowClickEventArgs<ICsgoServer> args)
    {
        if(args.Item is DatHostCsgoServer)
        {
            navigation.NavigateTo($"/server?ServerId={args.Item.Id}&ServerType={CsgoServerConstants.DathostCsgoServerType}", true);
        }
        else if(args.Item is CsgoServer)
        {
            navigation.NavigateTo($"/server?ServerId={args.Item.Id}&ServerType={CsgoServerConstants.NormalCsgoServerType}", true);
        }
    }

    private async Task GetServersAsync()
    {
        try
        {
            csgoServers = await CsgoServerService.GetCsgoServers();
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
            _loading = false;
        }
    }

    private void OpenEditDialog(EditType editType, ICsgoServer csgoServer)
    {
        _editType = editType;
        if (_editType == EditType.Create)
        {
            CsgoServer server = new();
            tempServer = server;
            isVisible = true;
        }
        else
        {
            tempServer = csgoServer;
            isVisible = true;
        }
    }

    private async Task DeleteServerAsync(ICsgoServer csgoServer)
    {
        if(csgoServer is CsgoServer)
        {
            try
            {
                await CsgoServerService.DeleteCsgoServer((CsgoServer)csgoServer);
                csgoServers.Remove(csgoServer);
                Snackbar.Add($"Deleted server \"{csgoServer.Name}\"", Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                Snackbar.Add(e.Message, Severity.Info, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
            }

        } else
        {
            Snackbar.Add("You cannot remove servers from dathost", Severity.Warning, config => { config.Onclick = snackbar => { return Task.CompletedTask; }; });
            return;
        }
    }

    private async Task OnDeleteConfirmShow(ICsgoServer csgoServer)
    {
        bool? result = await confirmMessageBox.Show() == null ? false : true;

        if (result != null && (bool)result)
            await DeleteServerAsync(csgoServer);
        else
            return;
    }

    private async Task OnVisibilityChanged(bool isSucces)
    {
        isVisible = !isVisible;

        await GetServersAsync();
        await InvokeAsync(StateHasChanged);
    }

    public void OnServerChanged(object sender, EventArgs e) 
    {
        StateHasChanged();
    }
}