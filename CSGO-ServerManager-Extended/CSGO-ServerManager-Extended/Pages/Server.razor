@page "/server/{ServerId}"
@inject ICsgoServerService CsgoServerService
@inject ICsgoServerData CsgoServerData
@inject ISnackbar _snackBar;

@if(CsgoServer != null) {
    <ServerComponent Server="CsgoServer" OnServerChange="(ICsgoServer tempServer) => OnServerChanged(tempServer)">
        <ServerHeader>
            <StandardServerHeader Server="CsgoServer" StartStopServer="(async () => await StartStopServer())"/>
        </ServerHeader>
    </ServerComponent>
}

@code {
    [Parameter]
    public string ServerId { get; set; }

    private ICsgoServer CsgoServer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CsgoServer = await CsgoServerData.CsgoServers_Get(s => s.Id == ServerId);

        if (CsgoServer == null)
            CsgoServer = await CsgoServerService.GetDatHostServer(ServerId);
    }

    private async Task StartStopServer()
    {
        try
        {
            await CsgoServerService.StartStopServer(CsgoServer);
            if (CsgoServer.Booting)
                _snackBar.Add("Starting server", Severity.Info);
            else
                _snackBar.Add("Stopping server", Severity.Info);
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error);
        }

        StateHasChanged();
    }

    private void OnServerChanged(ICsgoServer csgoServer)
    {
        CsgoServer = csgoServer;
        StateHasChanged();
    }
}