@page "/server"
@using MudBlazor.Services
@inject ICsgoServerService CsgoServerService
@implements IAsyncDisposable

<MudBreakpointProvider>
    <MudGrid Justify="Justify.FlexStart">

        <MudItem xs="9">
            <MudText Typo="Typo.h6">@server.Name</MudText>
        </MudItem>

        <MudItem xs="3" Class="d-flex justify-end">
            <MudStack Row="true" Spacing="3" Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert=true>
                    <MudText Typo="Typo.subtitle1">Server: </MudText>
                </MudHidden>
                <MudSwitch @bind-Checked="@server.On" Color="Color.Primary" />
            </MudStack>
        </MudItem>

        <MudItem xs="12" sm="9">
            <MudText>This is your own description of the server</MudText>
        </MudItem>

        <MudItem xs="12" sm="3">
            <MudStack>
                <MudText>Connection Ip:</MudText>
                <MudDivider />
                <MudText>connect rodrik.dathost.net:28145; password hvk1212</MudText>
            </MudStack>
        </MudItem>

        <MudItem xs="12">
            <MudStack>
                <MudText Typo="Typo.subtitle1" Style="font-weight: bold">General Commands</MudText>
                <MudDivider />
            </MudStack>
        </MudItem>

        <MudItem xs="12" sm="3">
            <MudCard>
                <MudList Clickable="true" @bind-SelectedItem="selectedItem">
                    <MudListItem @bind-Expanded="expandList" Text="Change map">
                        <NestedList>
                            <MudListItem Text="Inferno" @onclick="() => ChangeMap()"/>
                            <MudListItem Text="Overpass" />
                            <MudListItem Text="Nuke" />
                            <MudListItem Text="Ancient" />
                            <MudListItem Text="Dust2" />
                            <MudListItem Text="Vertigo" />
                            <MudListItem Text="Mirage" />
                        </NestedList>
                    </MudListItem>
                </MudList>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudStack>
                <MudText Typo="Typo.subtitle1" Style="font-weight: bold">Match Commands</MudText>
                <MudDivider />
            </MudStack>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                <MudButton>Start match</MudButton>
                <MudButton>Start match with overtime</MudButton>
            </MudButtonGroup>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudButton FullWidth="@useFullSize" Color="Color.Primary" Variant="Variant.Filled">Pause match</MudButton>
        </MudItem>

    </MudGrid>
</MudBreakpointProvider>

@code {
    [Inject] 
    IBreakpointService BreakpointListener { get; set; }
    private AbstractCsgoServer server { get; set; }

    private Guid _subscriptionId;
    MudListItem selectedItem;
    bool useFullSize = false;
    bool expandList = false;

    protected override async Task OnInitializedAsync()
    {
        server = CsgoServerService.SelectedServerforNavigation;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var subscriptionResult = await BreakpointListener.Subscribe((breakpoint) =>
            {
                if(breakpoint == Breakpoint.Xs)
                    useFullSize = true;
                else
                    useFullSize = false;

                InvokeAsync(StateHasChanged);
            }, new ResizeOptions
            {
                ReportRate = 250,
                NotifyOnBreakpointOnly = true,
            });

            if (subscriptionResult.Breakpoint == Breakpoint.Xs)
                useFullSize = true;
            else
                useFullSize = false;

            _subscriptionId = subscriptionResult.SubscriptionId;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BreakpointListener.Unsubscribe(_subscriptionId);

    private void ChangeMap()
    {
        expandList = false;
    }
}
